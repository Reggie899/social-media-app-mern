{"ast":null,"code":"import axios from 'axios'; // init axios instance\n\n/**\n * Create new instance of axios with a custom config\n */\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL\n});\n/* \n    * check if there is a token provided (localStorage ) before sending the request\n    * if yes then use that token with every request\n*/\n\n/* api.interceptors.request.use(\n\n     (req) => {\n         if (localStorage.getItem(\"auth\")) {\n             req.headers.Authorization = `Bearer ${\n                 localStorage.getItem(\"auth\")\n            }`;\n        }\n    } \n    ); */\n\n/**\n * Auth requests\n */\n\n/**\n * \n * @param {formValues} user \n * @returns {Promise<JSON>}\n */\n\nexport const signup = user => api.post(\"/user/signup\", user);\n/**\n * \n \n * @returns {Promise<JSON>}\n */\n\nexport const validateToken = () => {\n  return api.get(\"/user/tokenValidation\", {\n    headers: {\n      \"Authorization\": `Bearer ${localStorage.getItem(\"auth\")}`\n    }\n  });\n};\n/**\n * \n * @param {formValues} user \n * @returns {Promise<JSON>}\n */\n\nexport const login = user => {\n  return api.post(\"/user/signin\", user);\n};\n/**\n * Post requests\n */\n\n/**\n * \n * @returns {Promise<JSON>}\n */\n\nexport const fetchPosts = () => api.get(\"/posts/getposts\");\n/**\n * \n * @param {formValues} newPost \n * @returns {Promise<JSON>}\n */\n\nexport const createPost = newPost => api.post(\"/posts/addpost\", newPost);\n/**\n * \n * @param {ObjectId} id \n * @param {formValues} updatedPost \n * @returns {Promise<JSON>}\n */\n\nexport const updatePost = (id, updatedPost) => api.put(`/posts/editpost/${id}`, updatedPost);\n/**\n * \n * @param {ObjectId} id \n * @returns {Promise<JSON>}\n */\n\nexport const likePost = id => api.put(`/posts/likepost/${id}`);\n/**\n * \n * @param {ObjectId} id \n * @returns {Promise<JSON>}\n */\n\nexport const deletePost = id => api.delete(`/posts/removepost/${id}`);\nexport const fetchStories = () => api.get(\"/getstories\");\nexport const createStory = newStory => api.post(\"/createstory\", newStory);\nexport const updateStory = (id, updatedStory) => api.put(`/updatestory/${id}`, updatedStory);\nexport const deleteStory = id => api.delete(`/deletestory/${id}`);\nexport const likeStory = id => api.patch(`/likestory/${id}`);","map":{"version":3,"sources":["/Users/reginaschmidt/Documents/Web-Projects/mern_example/client/src/api/index.js"],"names":["axios","api","create","baseURL","process","env","REACT_APP_BACKEND_URL","signup","user","post","validateToken","get","headers","localStorage","getItem","login","fetchPosts","createPost","newPost","updatePost","id","updatedPost","put","likePost","deletePost","delete","fetchStories","createStory","newStory","updateStory","updatedStory","deleteStory","likeStory","patch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAvB,CAAb,CAAZ;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI,OAAO,MAAMC,MAAM,GAAIC,IAAD,IAAUP,GAAG,CAACQ,IAAJ,CAAS,cAAT,EAAyBD,IAAzB,CAAzB;AAEP;AACJ;AACA;AACA;AACA;;AACC,OAAO,MAAME,aAAa,GAAG,MAAM;AAChC,SAAOT,GAAG,CAACU,GAAJ,CAAQ,uBAAR,EAAiC;AACpCC,IAAAA,OAAO,EAAC;AACJ,uBAAmB,UACfC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAA6B;AAF7B;AAD4B,GAAjC,CAAP;AAMH,CAPO;AASR;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,KAAK,GAAIP,IAAD,IAAU;AAE3B,SAAOP,GAAG,CAACQ,IAAJ,CAAS,cAAT,EAAyBD,IAAzB,CAAP;AAAsC,CAFnC;AAKP;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,UAAU,GAAG,MAAMf,GAAG,CAACU,GAAJ,CAAQ,iBAAR,CAAzB;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,UAAU,GAAIC,OAAD,IAAajB,GAAG,CAACQ,IAAJ,CAAS,gBAAT,EAA2BS,OAA3B,CAAhC;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAKC,WAAL,KAAqBpB,GAAG,CAACqB,GAAJ,CAAS,mBAAkBF,EAAG,EAA9B,EAAiCC,WAAjC,CAAxC;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,QAAQ,GAAIH,EAAD,IAAQnB,GAAG,CAACqB,GAAJ,CAAS,mBAAkBF,EAAG,EAA9B,CAAzB;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,UAAU,GAAIJ,EAAD,IAAQnB,GAAG,CAACwB,MAAJ,CAAY,qBAAoBL,EAAG,EAAnC,CAA3B;AAGP,OAAO,MAAMM,YAAY,GAAG,MAAMzB,GAAG,CAACU,GAAJ,CAAQ,aAAR,CAA3B;AACP,OAAO,MAAMgB,WAAW,GAAIC,QAAD,IAAc3B,GAAG,CAACQ,IAAJ,CAAS,cAAT,EAAyBmB,QAAzB,CAAlC;AACP,OAAO,MAAMC,WAAW,GAAG,CAACT,EAAD,EAAKU,YAAL,KACzB7B,GAAG,CAACqB,GAAJ,CAAS,gBAAeF,EAAG,EAA3B,EAA8BU,YAA9B,CADK;AAEP,OAAO,MAAMC,WAAW,GAAIX,EAAD,IAAQnB,GAAG,CAACwB,MAAJ,CAAY,gBAAeL,EAAG,EAA9B,CAA5B;AACP,OAAO,MAAMY,SAAS,GAAIZ,EAAD,IAAQnB,GAAG,CAACgC,KAAJ,CAAW,cAAab,EAAG,EAA3B,CAA1B","sourcesContent":["import axios from 'axios';\n\n// init axios instance\n\n/**\n * Create new instance of axios with a custom config\n */\n\nconst api = axios.create({ baseURL: process.env.REACT_APP_BACKEND_URL });\n\n\n/* \n    * check if there is a token provided (localStorage ) before sending the request\n    * if yes then use that token with every request\n*/\n\n/* api.interceptors.request.use(\n\n     (req) => {\n         if (localStorage.getItem(\"auth\")) {\n             req.headers.Authorization = `Bearer ${\n                 localStorage.getItem(\"auth\")\n            }`;\n        }\n    } \n    ); */\n    \n    /**\n     * Auth requests\n     */\n    /**\n     * \n     * @param {formValues} user \n     * @returns {Promise<JSON>}\n     */\n    export const signup = (user) => api.post(\"/user/signup\", user);\n    \n    /**\n     * \n     \n     * @returns {Promise<JSON>}\n     */\n export const validateToken = () => {\n    return api.get(\"/user/tokenValidation\" ,{\n        headers:{\n            \"Authorization\" : `Bearer ${\n                localStorage.getItem(\"auth\")}`\n        }\n    } )\n};\n\n/**\n * \n * @param {formValues} user \n * @returns {Promise<JSON>}\n */\nexport const login = (user) => {\n    \n    return api.post(\"/user/signin\", user)};\n\n\n/**\n * Post requests\n */\n/**\n * \n * @returns {Promise<JSON>}\n */\nexport const fetchPosts = () => api.get(\"/posts/getposts\");\n\n/**\n * \n * @param {formValues} newPost \n * @returns {Promise<JSON>}\n */\nexport const createPost = (newPost) => api.post(\"/posts/addpost\", newPost);\n\n/**\n * \n * @param {ObjectId} id \n * @param {formValues} updatedPost \n * @returns {Promise<JSON>}\n */\nexport const updatePost = (id, updatedPost) => api.put(`/posts/editpost/${id}`, updatedPost);\n\n/**\n * \n * @param {ObjectId} id \n * @returns {Promise<JSON>}\n */\nexport const likePost = (id) => api.put(`/posts/likepost/${id}`);\n\n/**\n * \n * @param {ObjectId} id \n * @returns {Promise<JSON>}\n */\nexport const deletePost = (id) => api.delete(`/posts/removepost/${id}`);\n\n\nexport const fetchStories = () => api.get(\"/getstories\");\nexport const createStory = (newStory) => api.post(\"/createstory\", newStory);\nexport const updateStory = (id, updatedStory) =>\n  api.put(`/updatestory/${id}`, updatedStory);\nexport const deleteStory = (id) => api.delete(`/deletestory/${id}`);\nexport const likeStory = (id) => api.patch(`/likestory/${id}`);\n\n\n\n"]},"metadata":{},"sourceType":"module"}